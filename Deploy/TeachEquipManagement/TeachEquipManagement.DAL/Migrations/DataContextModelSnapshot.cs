// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeachEquipManagement.DAL.EFContext;

#nullable disable

namespace TeachEquipManagement.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.AccountDetail", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("");

                    b.Property<string>("Avatar")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("");

                    b.Property<string>("SpoFileId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("AccountDetails");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.ApprovalRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 8, 18, 23, 15, 32, 415, DateTimeKind.Local).AddTicks(7938));

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("InventoryId");

                    b.ToTable("ApprovalRequests");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Category"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Storage Sacks"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Households"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Maintenance Sprays "
                        },
                        new
                        {
                            Id = 5,
                            Type = "Tapes"
                        },
                        new
                        {
                            Id = 6,
                            Type = "Marker Pens"
                        },
                        new
                        {
                            Id = 7,
                            Type = "Hand Cleaners"
                        },
                        new
                        {
                            Id = 8,
                            Type = "Electronics"
                        },
                        new
                        {
                            Id = 9,
                            Type = "School suppliers"
                        });
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountBorrow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ToolId")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.InventoryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 8, 18, 23, 15, 32, 416, DateTimeKind.Local).AddTicks(5556));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryHistories");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InvoiceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 8, 18, 23, 15, 32, 415, DateTimeKind.Local).AddTicks(3505));

                    b.Property<double>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ToolId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleDescription = "This role can manage all system",
                            RoleName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleDescription = "This role can manage inventory, approve request",
                            RoleName = "manager"
                        },
                        new
                        {
                            Id = 3,
                            RoleDescription = "This role just can view inventory, create request",
                            RoleName = "user"
                        });
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "171 Trường Chinh, P. An Khê, Q. Thanh Khê, Đà Nẵng",
                            ContactName = "Trần Đình Long",
                            Phone = "02363721232",
                            SupplierName = "Công ty Cổ Phần Tập Đoàn Hòa Phát"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Số 9, Đại lộ Thống Nhất, Khu công nghiệp Sóng Thần II, Phường Dĩ An, Thành phố Dĩ An, Tỉnh Bình Dương, Việt Nam.",
                            ContactName = "Lê Phước Vũ",
                            Phone = "18001515",
                            SupplierName = "Công ty Cổ Phần Tập Đoàn Hoa Sen"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Số 5, đường số 5, Khu Công Nghiệp Sóng Thần 1, phường Dĩ An, thành phố Dĩ An, tỉnh Bình Dương",
                            ContactName = "Tôn Giả Hoàng",
                            Phone = "02743790420",
                            SupplierName = "Công ty Cổ Phần Tôn Đông Á"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Khu công nghệ cao Hòa Lạc, Thạch Hòa, Thạch Thất, Hà Nội",
                            ContactName = "Hồ Xuân Năng",
                            Phone = "18006766",
                            SupplierName = "Công ty Cổ Phần Vicostone"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Tòa nhà Viglacera, Số 1 Đại lộ Thăng Long, Hà Nội",
                            ContactName = "Nguyễn Văn Tuấn",
                            Phone = "35536660",
                            SupplierName = "Tổng công ty Viglacera - CTCP"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Tòa nhà văn phòng Eurowindow Office Building, Số 02 Tôn Thất Tùng, Đống Đa, Hà Nội",
                            ContactName = "Tống Gia Phát",
                            Phone = "37474777",
                            SupplierName = "Công ty Cổ Phần Eurowindow"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Lô C23a, Khu Công Nghiệp Hiệp Phước, Xã Hiệp Phước, Huyện Nhà Bè, Thành phố Hồ Chí Minh, Việt Nam",
                            ContactName = "Vĩnh Thế Tương",
                            Phone = "0837818554",
                            SupplierName = "Công ty Cổ Phần Công Nghiệp Vĩnh Tường"
                        });
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpoFileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("ToolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.ToolCategory", b =>
                {
                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ToolId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ToolCategories");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Account", b =>
                {
                    b.HasOne("TeachEquipManagement.DAL.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.AccountDetail", b =>
                {
                    b.HasOne("TeachEquipManagement.DAL.Models.Account", "Account")
                        .WithOne("AccountDetail")
                        .HasForeignKey("TeachEquipManagement.DAL.Models.AccountDetail", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.ApprovalRequest", b =>
                {
                    b.HasOne("TeachEquipManagement.DAL.Models.Account", "Account")
                        .WithMany("ApprovalRequests")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachEquipManagement.DAL.Models.Inventory", "Inventory")
                        .WithMany("ApprovalRequests")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Inventory", b =>
                {
                    b.HasOne("TeachEquipManagement.DAL.Models.Tool", "Tool")
                        .WithOne("Inventory")
                        .HasForeignKey("TeachEquipManagement.DAL.Models.Inventory", "ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.InventoryHistory", b =>
                {
                    b.HasOne("TeachEquipManagement.DAL.Models.Account", "Account")
                        .WithMany("InventoryHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachEquipManagement.DAL.Models.Inventory", "Inventory")
                        .WithMany("InventoryHistories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Invoice", b =>
                {
                    b.HasOne("TeachEquipManagement.DAL.Models.Tool", "Tool")
                        .WithMany("Invoices")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Tool", b =>
                {
                    b.HasOne("TeachEquipManagement.DAL.Models.Supplier", "Supplier")
                        .WithMany("Tools")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.ToolCategory", b =>
                {
                    b.HasOne("TeachEquipManagement.DAL.Models.Category", "Category")
                        .WithMany("ToolCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachEquipManagement.DAL.Models.Tool", "Tool")
                        .WithMany("ToolCategories")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Account", b =>
                {
                    b.Navigation("AccountDetail")
                        .IsRequired();

                    b.Navigation("ApprovalRequests");

                    b.Navigation("InventoryHistories");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Category", b =>
                {
                    b.Navigation("ToolCategories");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Inventory", b =>
                {
                    b.Navigation("ApprovalRequests");

                    b.Navigation("InventoryHistories");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Supplier", b =>
                {
                    b.Navigation("Tools");
                });

            modelBuilder.Entity("TeachEquipManagement.DAL.Models.Tool", b =>
                {
                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("Invoices");

                    b.Navigation("ToolCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
